# 工作流的名称
name: Sync Fork

# 触发工作流的事件
on:
  # 1. 定时触发：每天凌晨3点（UTC时间）运行一次
  schedule:
    - cron: '0 3 * * *'
  
  # 2. 手动触发：允许你在 Actions 页面手动点击按钮运行
  workflow_dispatch:

# 定义一个工作 (job)
jobs:
  sync:
    # 运行此 job 的虚拟机环境
    runs-on: ubuntu-latest

    # job 的步骤
    steps:
      # 步骤1: 检出你的 fork 仓库的代码
      # 使用 persist-credentials: false 是为了避免与下一步的 token 冲突
      - name: Checkout Fork
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # 步骤2: 关键！将上游仓库的更新同步到你的 fork
      # 这是一个社区维护的、专门用于同步 fork 的 Action，非常方便
      - name: Sync Upstream
        uses: aormsby/fork-sync-with-upstream@v3.4
        with:
          # 上游仓库的地址，格式为 'owner/repo'
          # !!!【请修改这里】!!! 将 'upstream_owner/upstream_repo' 替换为原始仓库的地址
          upstream_repo: 'privacy-protection-tools/anti-AD'
          
          # 你想同步的上游分支
          upstream_branch: 'main'
          
          # 你想将更新同步到你 fork 的哪个分支
          target_branch: 'main'
          
          # GitHub Actions 默认提供的 token，用于授权 Action 推送代码到你的仓库
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # (可选) 如果你的 fork 分支有提交，而上游也有更新，是否强制覆盖
          # 设为 'true' 可以避免合并冲突，但会丢弃你自己的提交。
          # 如果你只把 fork 当作镜像，建议设为 'true'。如果你在上面有自己的修改，请谨慎。
          force: true
